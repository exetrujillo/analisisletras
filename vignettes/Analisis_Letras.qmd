---
title: "Análisis de Letras"
author: "Exequiel Trujillo Escobar"
date: "`r Sys.Date()`"
description: "Extracción y análisis de letras de canciones"
format: 
  html:
    css: styles.css
    highlight-style: monokai
editor: visual
---

# Introducción

Este proyecto utiliza R para realizar análisis de letras de canciones en español. Se utiliza la database de \[LRCLIB\](<https://lrclib.net/db-dumps>) y a partir de ella se crean data frames para cada caso de estudio.

A lo largo de todo el código se irá ejemplificando el desarrollo de una investigación sobre las letras de un conjunto de bandas, basado en algún criterio puesto por le investigadore, ya sea un grupo social, un estilo, bandas dentro de un espacio geográficom etc.

El ejemplo para este caso será el ***indie chileno*** en el siglo XXI, por tanto se van a ejemplificar todas las funciones dentro de este contexto. Esto incluye creación de corpus de texto, análisis de frecuencia de palabras en ciertas bandas o en conjuntos de bandas, etc.

En resumen, se crea un flujo de trabajo, partiendo por definir una lista de artistas, luego crear un corpus unificado que combine las letras de todas las bandas seleccionadas. Realizar análisis lingüísticos básicos (frecuencia de palabras, longitud promedio, etc.). Incluir ejemplos de visualizaciones para explorar patrones.

```{r setup}

# Eliminar el entorno
# rm(list = ls())

# Setear el directorio de trabajo para la ejecucion de las funciones del paquete
knitr::opts_knit$set(root.dir = normalizePath("../"))
```

# Exploración de la base de datos

Aquí importamos la base de datos, sus tablas y el tipo de información que pueden contener

## Importar base de datos

```{r, include = FALSE}

# Abrir conexion para hacer pruebas
conn <- analisisletras::conectar_bd()

# Listar tablas (aparecen en la consola, pero no renderizadas)
tables <- DBI::dbListTables(conn)
print(tables)

analisisletras::desconectar_bd(conn)
```

El resultado son las siguientes tablas:

|  |  |  |  |  |  |
|------------|------------|------------|------------|------------|------------|
| "\_litestream_lock" | "\_litestream_seq" | "flags" | "lyrics" | "missing_tracks" | "sqlite_sequence" |
| "tracks" | "tracks_fts" | "tracks_fts_config" | "tracks_fts_data" | "tracks_fts_docsize" | "tracks_fts_idx" |

## Exploramos las tablas

```{r, include=FALSE}
# Conectamos a la base de datos
conn <- conectar_bd()

# Leer los primeros registros de tracks
dataTracks <- DBI::dbGetQuery(conn, "SELECT * FROM tracks LIMIT 10")

# Consultar la estructura de tracks
columnsTracks <- DBI::dbGetQuery(conn, "PRAGMA table_info(tracks)")

# Leer los primeros registros de lyrics
dataLyrics <- DBI::dbGetQuery(conn, "SELECT * FROM lyrics LIMIT 10")

# Consultar la estructura de lyrics
columnsLyrics <- DBI::dbGetQuery(conn, "PRAGMA table_info(lyrics)")

# Leer los primeros registros de tracks_fts
dataTracksFts <- DBI::dbGetQuery(conn, "SELECT * FROM tracks_fts LIMIT 10")

# Consultar la estructura de tracks_fts
columnsTracksFts <- DBI::dbGetQuery(conn, "PRAGMA table_info(tracks_fts)")

# Desconectamos la base de datos
desconectar_bd(conn)
```

## Estructura de las tablas de interés

Nos interesa particularmente la tabla tracks y la tabla lyrics, la tabla tracks_fts parece útil para búsquedas rápidas, tiene solo el nombre, el artista y el album de las canciones con texto normalizado.

### Tracks

| Columna | Tipo | Descripción | Ejemplo |
|------------------|------------------|------------------|------------------|
| `id` | INT | Clave primaria de la tabla. Usada para identificar de manera única cada canción o pista. | 3 |
| `name` | TEXT | Nombre de la canción o pista. Es sensible a mayúsculas y minúsculas. | Wildest Dreams |
| `name_lower` | TEXT | Versión en minúsculas del nombre de la pista (`name`). | wildest dreams |
| `artist_name` | TEXT | Nombre del artista que interpreta la canción. Sensible a mayúsculas y minúsculas. | ZAYN feat. Sia |
| `artist_name_lower` | TEXT | Versión en minúsculas del nombre del artista (`artist_name`). | zayn feat sia |
| `album_name` | TEXT | Nombre del álbum en el que se encuentra la canción. | Dusk Till Dawn (Radio Edit) |
| `album_name_lower` | TEXT | Versión en minúsculas del nombre del álbum (`album_name`). | dusk till dawn radio edit |
| `duration` | FLOAT | Duración de la canción en segundos. | 239 |
| `last_lyrics_id` | INT | Referencia a otra tabla (como `lyrics`) que almacena las letras de las canciones. Algunas no coinciden con `id` necesariamente. | 3 |
| `created_at` | DATE | Representa la fecha y la hora en que se creó el registro. | 2022-11-14 11:46:45.978+00:00 |
| `updated_at` | DATE | Indica la fecha (y hora) en que se actualizó por última vez el registro. | 2022-11-14 11:46:45.978+00:00 |

### Lyrics

| Columna | Tipo | Descripción | Ejemplo |
|------------------|------------------|------------------|------------------|
| `id` | INT | Clave primaria de la tabla, única para cada registro de letras. | 3 |
| `plain_lyrics` | TEXT | Letras de la canción en formato simple (sin sincronización con la música). | Not tryna be indie\\nNot tryna be cool\\nJust tryna be in this\\nTell me, are you too?\\n\\nCan \[...\] |
| `synced_lyrics` | TEXT | Letras sincronizadas, con marcas de tiempo para seguir la canción mientras se reproduce. | \[00:09.66\] Not tryna be indie\\n\[00:12.30\] Not tryna be cool\\n\[00:14.99\] Just tryna be in \[...\] |
| `track_id` | INT | Clave foránea que referencia la columna `id` en la tabla `tracks`. Esto vincula las letras con las canciones. | 3 |
| `has_plain_lyrics` | BOOLEAN | Indica si hay letras simples disponibles (\[`TRUE` = 1\] o \[`FALSE` = 0\]). | 1 |
| `has_synced_lyrics` | BOOLEAN | Indica si hay letras sincronizadas disponibles (\[`TRUE` = 1\] o \[`FALSE` = 0\]). | 1 |
| `instrumental` | BOOLEAN | Indica si la pista es instrumental y, por lo tanto, no tiene letras. (\[`TRUE` = 1\] o \[`FALSE` = 0\]). | 0 |
| `source` | TEXT | Fuente de las letras (La mayoría está en NA). | NA |
| `created_at` | DATE | Fecha y hora de creación del registro. | 2022-11-14 11:46:45.978+00:00 |
| `updated_at` | DATE | Fecha y hora de la última actualización del registro. | 2022-11-14 11:46:45.978+00:00 |

# Funciones de extracción

Ya teniendo claridad de la estructura de las tablas que nos interesan, comenzaremos a utilizar las funciones que nos permitan crear nuestros propios data frames, extrayendo las columnas que nos interesan.

## El ejemplo

Partiremos con una sola banda

## Variables iniciales de ejemplo

```{r}

artista_ej <- "Las Olas (NoisPop)"
```

## Normalizar nombre de artista o texto en general

Normalizar los nombres de los artistas es estandarizar su "formato" para que sean uniformes, independientemente de cómo estén registrados en la base de datos o ingresados por el usuario. Esto es útil para evitar problemas como registros duplicados o consultas fallidas debido a diferencias en mayúsculas, espacios, acentos, o caracteres especiales.

```{r}
artista_ej_nrm <- analisisletras::nrmlztxt(artista_ej)
print(artista_ej_nrm)
```

## Obtener canciones de un artista con las letras

```{r}
# Ejemplo de uso de la función con nombre sin normalizar
df_artista_ej <- analisisletras::buscar_por_artista(artista_ej)

# Mostrar las primeras filas del dataframe final
utils::head(df_artista_ej)
```

Arroja 51 filas con 15 variables: **track_id** (\<int\>), **name** (\<chr\>), **name_lower** (\<chr\>), **artist_name** (\<chr\>), **artist_name_lower** (\<chr\>), **album_name** (\<chr\>), **album_name_lower** (\<chr\>), **duration** (\<dbl\>), **updated_at** (\<chr\>), **lyrics_id** (\<int\>), **plain_lyrics** (\<chr\>), **synced_lyrics** (\<chr\>), **has_plain_lyrics** (\<int\>), **has_synced_lyrics** (\<int\>) e **instrumental** (\<int\>).

## Limpieza de tablas

Supongamos que tenemos un pequeño subconjunto de datos:

| name_lower | artist_name_lower | has_synced_lyrics | updated_at | has_plain_lyrics |
|---------------|---------------|---------------|---------------|---------------|
| doce | asia menor | 0 | 2023-01-01 12:00:00 | 1 |
| doce | asia menor | 1 | 2023-01-02 12:00:00 | 1 |
| doce | asia menor | 1 | 2022-12-31 12:00:00 | 1 |

```{r}
# Con el ejemplo, esos duplicados se eliminan efectivamente
df_artista_ej <- limpiar_duplicados(df_artista_ej)
```

# El indie chileno

Ciertamente una banda no constituye un estilo artístico por completo. El indie de por sí es una categoría bastante amplia que refiere a artistas (solistas o bandas) que en general se encuentran por fuera del espacio de grandes discográficas y de estructuras comerciales importantes e incluso abarcan varios géneros musicales, como el rock alternativo, el pop o el punk. Considerando esto, una característica particular es que viene más de una producción independiente del arte, relativamente independiente al capital comparando con la música más comercial.

Como se comentaba anteriormente, lo amplio del indie también refiere a la diversidad de estilos que se entremezclan, desde el rock, el pop, el folk, música más electrónica, elementos de rap, etc. Con un sello bastante experimental en muchos casos, sonidos más difusos o cierto grado de sensación de letargo en algunas sonoridades extendidas en la escena.

### Definición de grupos artísticos

```{r}
bandas_indie <- c(
  "Abelocaín",
  "Ablusion",
  "Adelaida",
  "Adolescentes sin Edad",
  "Aguanieve",
  "Akero",
  "Alex Anwandter",
  "Alex & Daniel",
  "Amarga Marga",
  "Antonel",
  "Aquí Brillamos",
  "Arranquemos del Invierno",
  "Ases Falsos",
  "Asia menor",
  "Candelabro",
  "Chini and the technicians",
  "Chini png",
  "Círculo Polar",
  "Ciudad Vapor",
  "Columpios al Suelo",
  "Confío en tus amigos",
  "De Perder sus Pétalos",
  "Del Otro Balcón",
  "Déjenme Dormir",
  "Dënver",
  "Diego Lorenzini",
  "Dolorio & los Tunantes",
  "El cómodo silencio de los que hablan poco",
  "Etéreos",
  "Fakuta",
  "Fabiancito",
  "Floresalegría",
  "Flores",
  "Fonosida",
  "Fother Muckers",
  "Frucola Frappé",
  "GEPE",
  "Girafa",
  "Gomitas Ácidas",
  "Guillermo Paf",
  "Helices",
  "Hesse Kassel",
  "Imágenes Sepia",
  "Inundaremos",
  "Javiera Mena",
  "Karla Grunewaldt",
  "Laurela",
  "Las Olas (NoisPop)",
  "Los animales también se suicidan",
  "Los repuestos superpuestos",
  "Los Santos Dumont",
  "Los Valentina",
  "Mantarraya",
  "Mitimitis",
  "MonoAzul",
  "Niña Tormenta",
  "Niño Cohete",
  "Niños del Cerro",
  "No Invierno",
  "Novio",
  "Odisea",
  "Oye Elizabeth",
  "Panico",
  "Paracaidistas",
  "Parálisis del Sueño",
  "Patio Solar",
  "Pau",
  "Pedropiedra",
  "Planeta No",
  "Planetario",
  "Playa Gótica",
  "Poder Fantasma",
  "Prehistöricos",
  "Protistas",
  "Pulmón",
  "Ratarro y los Roedores",
  "Rosario Alfonso",
  "Seba Alfaro",
  "Simón Campusano",
  "Siniestra Pandora",
  "Silabario",
  "Super Especial",
  "Taller Dejao",
  "Teleradio Donoso",
  "Tunacola",
  "Tus amigos nuevos",
  "Yaima Cat"
)
```

```{r}
bandas_no_encontradas <- c(
  ".gatofantasma",
  "Alechito",
  "Animales Extintos",
  "Anttonias",
  "Aramea",
  "Árbol Lunar",
  "Bolpo",
  "BorisKarloff",
  "Borrosos",
  "BuenaMemoria",
  "Cabro",
  "cata teuber",
  "Cazaladrillo",
  "Chico Bestia",
  "Chico Eléctrico",
  "Clara Löffel",
  "Conjunto Apropiaciones",
  "Cristóbal Gacitúa",
  "Daniela Gatica y el fruto del ruido",
  "Doumu",
  "Dúo Dial",
  "Emisario Greda",
  "Es lo que Hay",
  "Espacio Volátil",
  "Fantasmático",
  "Felert",
  "Fórmula Rosa",
  "fosfenos",
  "Girocompás",
  "Hemisferio Sur",
  "Incendio Intencional",
  "iiii", # Sí, es el nombre de la banda
  "Josefina Espejo",
  "Kirtongo",
  "Lejanía",
  "Los fugitivos gnomos",
  "Los Martinez",
  "Los Turis",
  "Luces Cálidas",
  "María Tyrana",
  "Mariana Montenegro",
  "Medio Hermano",
  "Milton James",
  "Mitomania",
  "Nisuyai",
  "No Tan Humano",
  "Palacio Verde",
  "Pancho Gana",
  "Perfectos Extraños",
  "Perrogato",
  "Pieza Oscura",
  "Piscina Recreo",
  "Problemas en Paris",
  "Rompeola",
  "Rucitama",
  "Rubor Cassata",
  "ruido nominal",
  "Salares",
  "siempre perdida",
  "Supertriste",
  "Teoría de Maicol",
  "Trasatlántica",
  "Tres Agujas",
  "Tus amigos imaginarios",
  "Violentistas de Siempre",
  "Voy y Vuelvo",
  "Yaney"
)
```

## Crear corpus

```{r, include=FALSE}
# Crear el corpus con todas las bandas
corpus_df <- crear_corpus_de_bandas(bandas_indie)

# Mostrar las primeras filas del dataframe resultante
# head(corpus_df)

# Revisar si se actualiza información de bandas que antes no aparecian
corpus_df_x <- crear_corpus_de_bandas(bandas_no_encontradas)

# Combinar si es necesario
corpus_df <- rbind(corpus_df, corpus_df_x)
```

Obtenemos una muestra de 1101 canciones.

```{r}
# Eliminamos algunas filas específicas que no nos sirven
corpus_df <- analisisletras::eliminar_por_track_id(
  corpus_df, c("1054623", "11003377", "1055052",
               "1055337", "10479847", "13361670",
               "14229031", "10645318", "12106648",
               "12989728", "13392416", "12646095",
               "13616121", "10969397", "13439050",
               "4058603", "12241956", "12405382",
               "13026915", "12557417", "10411030",
               "16415113", "13819028", "11501440"
               )
  )
```

Ahora se reduce a 1078 canciones.

```{r}
# Adicionalmente podemos eliminar las instrumentales
corpus_df <- analisisletras::eliminar_instrumentales(corpus_df)
```

Aquí se redujo a 1061 canciones.

# Exportación de data frames

### En excel

```{r, include = FALSE}

# Ejemplo de uso:
exportar_excel(corpus_df, "data/corpus_bandas.xlsx")
```

# Análisis de datos

Ya que limpiamos nuestra base de datos, si la exportamos la tendremos sin tener que procesar toda la base de datos inicial cada vez que queramos realizar algún análisis. Ahora podemos importarlo.

## Importación de datos

```{r, include=FALSE}
# Importamos el excel que ya guardamos anteriormente
archivo <- "data/corpus_bandas.xlsx"
corpus_df <- analisisletras::importar_excel(archivo)
```

En el paquete se incluye una función llamada crear_corpus_literario, que recibe como parámetros

-   **dataframe:** Dataframe con las letras o textos.

-   **stopwords_extra:** Vector opcional de palabras adicionales a considerar como stopwords.

Esta función retorna un objeto particular, una lista con 5 componentes:

1.  El data frame original, el parámetro inicial sin la columna instrumental

2.  Un corpus de quanteda

3.  Los tokens de quanteda generados a partir del corpus

4.  Un set de stopwords combinadas entre las standard en español y las que se agreguen adhok.

5.  Una matriz de documento-término generada a partir de los tokens

6.  Una matriz de documento-término generada a partir de los tokens de bigramas

7.  Una matriz de documento-término generada a partir de los tokens de trigramas

8.  Cálculo de frecuencias

9.  Cálculo de frecuencias de bigramas

10. Cálculo de frecuencias de trigramas

```{r}
# Definimos stop words para nuestro caso
stopwords_adhok <- c("you", "i", "the", "to", "go", "my", "in", "this", "and", "oh", "ah", "ay", "uh", "oh-oh-oh")
  
corpus_literario <- crear_corpus_literario(corpus_df, 
                                              stopwords_extra = stopwords_adhok,
                                              bigrama_stopwords = TRUE,
                                              trigrama_stopwords = TRUE
                                              )
```

## Análisis de frecuencia de términos

```{r}
# Podemos usar ahora esta función para graficar las palabras más utilizadas
generar_analisis_frecuencias(corpus_literario)

# Extraer y ordenar los bigramas y trigramas más frecuentes
bigramas_mas_frecuentes <- quanteda::topfeatures(corpus_literario$dtm_bigramas, 100)
trigramas_mas_frecuentes <- quanteda::topfeatures(corpus_literario$dtm_trigramas, 100)

# Convertir a un dataframe para mayor claridad
bigramas_df <- data.frame(
  bigrama = names(bigramas_mas_frecuentes),
  frecuencia = bigramas_mas_frecuentes,
  stringsAsFactors = FALSE
)

trigramas_df <- data.frame(
  trigrama = names(trigramas_mas_frecuentes),
  frecuencia = trigramas_mas_frecuentes,
  stringsAsFactors = FALSE
)

# Imprimir los 100 primeros bigramas y trigramas
print(bigramas_df)
print(trigramas_df)
```

## Análisis de bi-gramas

Lorem ipsum.

## Buscar bigramas en canciones

```{r}


canciones_con_bigramas <- buscar_ngramas(corpus_literario,
                                         2,
                                         c("tan_bien", "tan_mal")
                                         )

canciones_con_trigramas <- buscar_ngramas(corpus_literario,
                                          3,
                                          c("tú_y_yo", "te_voy_a")
                                          )
```

Ahora podemos ir a buscar en las canciones las letras que llevan estos bigramas o trigramas que nos interesan, para el análisis literario, por ejemplo.

## Análisis de sentimientos

Para realizar análisis de sentimientos, lo más efectivo de momento parece ser exportar el dataframe corpus_df. Esto se lleva a un link de Google Colab escrito para realizar análisis de sentimientos y poder importar posteriormente esos datos en un dataframe de vuelta a este documento. Importa el archivo corpus_bandas.xlsx en Colab. Luego, descarga en el Colab al final de todo el procesamiento (Puede tomar unos 40 minutos con unas 1000 filas de datos) descarga el archivo df_emociones.xlsx.

[Jupiternotebook en Google Colab para realizar el análisis de sentimientos](https://colab.research.google.com/drive/1IMMNaCr-_hodOii7Fj98ZUZeMIJDULTI)

```{r}
# Importamos el excel que ya procesamos anteriormente en Colab
df_emociones <- importar_excel("data/df_emociones.xlsx")

# Ver las primeras filas
# head(df_emociones)

# Ahora podemos aplicar la función filtrar_emociones
# Para obtener un dataframe con las canciones que tengan 51 o más
# De porcentaje para alguna emoción (excluimos la emoción "neutral")
df_emociones_fuertes <- filtrar_emociones(df_emociones, 
                                          porc_min = 51, 
                                          incluir_neutral = FALSE)
```

Ahora tenemos un dataframe con 1061 canciones y 24 variables, incluyendo un json con las emociones asociadas a las estrofas de las canciones, así como un promedio de las emociones para las canciones completas. Se agregan columnas emociones_predom y porc_emociones_predom, para mostrar la cualidad y cantidad de emoción predominante en la letra.

Se creó también una lista de spotify con las canciones [aquí.](https://open.spotify.com/playlist/4fBoykAd76rcsgaRyOtZKz)

## Reconocimiento de patrones gramaticales

## Visualización de tendencias

## Análisis literario

## Consideraciones especiales respecto a la prosa

En las canciones, a diferencia de casos como las novelas o las noticias, el análisis debe considerar algunas cuestiones como:

-   La posibilidad de sesgo por repetición de frases en coros o en otras partes de las canciones.

-   Elementos no textuales, como onomatopeyas.

-   Lenguaje poético puede no ser tan facilmente entendible para los algoritmos de sentimiento. Hay que buscar uno que funciones bien en español.

-   Dialecto en el indie chileno puede afectar el análisis de sentimiento.

-   La música tiene un elemento emocional o performativo que no puede captarse solo a través del texto. Por lo que habría que complementar con datos que se puedan sacar de apis como la de spotify o Essentia.
